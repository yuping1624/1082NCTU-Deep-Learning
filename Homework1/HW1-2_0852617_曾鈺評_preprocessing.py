# -*- coding: utf-8 -*-
"""HW1-2_0852617_曾鈺評_preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zxuDUFdWv_Om2c0YKUZSCGiOX4IqYMYk
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Any results you write to the current directory are saved as output.

import os
import numpy as np
import cv2
import torch
import torch.nn
import torch.utils.data
import torch.nn.functional as F
import torchvision.transforms as transforms
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from torch.utils.data import Dataset, DataLoader
import time
from PIL import Image

trainset = pd.read_csv("/kaggle/input/cnn-hw1-2/train.csv")
trainset["filename_e"] = trainset["filename"].str.replace('+', '')
trainset["filename_e"] = trainset["filename_e"].str.replace('@', '')
trainset["filename_e"] = trainset["filename_e"].str.replace('&', '')
trainset["filename_e"] = trainset["filename_e"].str.replace('!', '')
trainset["filename_e"] = trainset["filename_e"].str.replace('=exif=', '_exif')

trainset

testset = pd.read_csv("/kaggle/input/cnn-hw1-2/test.csv")
testset["filename_e"] = testset["filename"].str.replace('+', '')
testset

le = LabelEncoder()
trainset['encoded_labels'] = le.fit_transform(trainset['label'])
le = LabelEncoder()
testset['encoded_labels'] = le.fit_transform(testset['label'])

def image_loader(image_name, trans=None):
    image = Image.open(image_name).convert('RGB')
    if trans == transform1:
        image = transform1(image).unsqueeze(0)
    elif trans == transform2:
        image = transform2(image).unsqueeze(0)
    elif trans == transform3:
        image = transform2(image).unsqueeze(0)
    elif trans == transform4:
        image = transform4(image).unsqueeze(0)
    elif trans == transform5:
        image = transform5(image).unsqueeze(0)
    elif trans == transform6:
        image = transform6(image).unsqueeze(0)
    else:
        None
    return image

def image_loader2(image_name, trans=None):
    if trans == transform1:
        image = transform1(image_name).unsqueeze(0)
    elif trans == transform2:
        image = transform2(image_name).unsqueeze(0)
    elif trans == transform3:
        image = transform2(image_name).unsqueeze(0)
    elif trans == transform4:
        image = transform4(image_name).unsqueeze(0)
    elif trans == transform5:
        image = transform5(image_name).unsqueeze(0)
    elif trans == transform6:
        image = transform6(image_name).unsqueeze(0)
    else:
        None
    return image

directory = "/kaggle/input/cnn-hw1-2/"
trainset["file_loc"] = directory+trainset["filename_e"]
train_images = []
x_train = []
train_labels = trainset["file_loc"]

for img_file in range(len(trainset["filename"])): 
    #len(trainset["filename"])
    try:
        xlab1 = trainset["xmin"].values[img_file]
        xlab2 = trainset["xmax"].values[img_file]
        ylab1 = trainset["ymin"].values[img_file]
        ylab2 = trainset["ymax"].values[img_file]
        image = cv2.imread(trainset["file_loc"][img_file]) 
        image = image[ylab1:ylab2, xlab1:xlab2]
    #image1 = cv2.resize(image,(160,160)) 
    except Exception as e:
        print(trainset["file_loc"][img_file])
        print(str(e))
    #train_images.append(image)
    x_train.append(image)
    #train_labels.append(label)

x_train.shape

x_train = np.asarray(x_train)
np.save('train_crop', x_train)

for i in range(3528):
    print(x_train[i].shape)

directory = "/kaggle/input/cnn-hw1-2/"
testset["file_loc"] = directory+testset["filename_e"]
test_images = []
x_test = []
test_labels = testset["file_loc"]

for img_file in range(len(testset["filename"])): 
    #len(trainset["filename"])
    try:
        xlab1 = testset["xmin"].values[img_file]
        xlab2 = testset["xmax"].values[img_file]
        ylab1 = testset["ymin"].values[img_file]
        ylab2 = testset["ymax"].values[img_file]
        image = cv2.imread(testset["file_loc"][img_file]) 
        image = image[ylab1:ylab2, xlab1:xlab2]
    #image1 = cv2.resize(image,(160,160)) 
    except Exception as e:
        print(trainset["file_loc"][img_file])
        print(str(e))
    #train_images.append(image)
    x_test.append(image)
    #train_labels.append(label)

x_test = np.asarray(x_test)
np.save('test_crop', x_test)